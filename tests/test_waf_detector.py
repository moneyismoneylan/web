import os
import sys
from unittest.mock import MagicMock, patch

sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

from sqli_hunter.waf_detector import WafDetector

# Mock signatures to control the test environment
MOCK_SIGNATURES = {
    "F5 ASM": {
        "headers": {"Server": "BigIP"},
        "cookies": ["TS01234567"],
        "min_matches": 2
    },
    "Barracuda": {
        "cookies": ["BNI__BARRACUDA_LB_COOKIE"],
        "body": ["Barracuda.Networks"],
        "min_matches": 2
    },
    "ModSecurity": {
        "headers": {"Server": "Mod_Security"},
        "body": ["This error was generated by ModSecurity"],
        "min_matches": 2
    }
}

def detector():
    return WafDetector(MagicMock(), MagicMock())

@patch("sqli_hunter.waf_detector.WAF_SIGNATURES", MOCK_SIGNATURES)
def test_f5_asm_detection():
    """Tests F5 ASM detection based on multiple feature signals."""
    features = {
        "headers": {"server": "BigIP"},
        "cookies": {"TS01234567_"},
        "body": "Some text",
        "delay_ratio": 1.0
    }
    assert detector()._predict_waf(features) == "F5 ASM"

@patch("sqli_hunter.waf_detector.WAF_SIGNATURES", MOCK_SIGNATURES)
def test_barracuda_detection():
    """Tests Barracuda detection based on cookie and body."""
    features = {
        "headers": {},
        "cookies": {"BNI__BARRACUDA_LB_COOKIE"},
        "body": "Something from Barracuda.Networks here",
        "delay_ratio": 1.0
    }
    assert detector()._predict_waf(features) == "Barracuda"

@patch("sqli_hunter.waf_detector.WAF_SIGNATURES", MOCK_SIGNATURES)
def test_modsecurity_detection():
    """Tests ModSecurity detection based on server header and body."""
    features = {
        "headers": {"server": "Mod_Security"},
        "cookies": set(),
        "body": "This error was generated by ModSecurity",
        "delay_ratio": 1.0
    }
    assert detector()._predict_waf(features) == "ModSecurity"

@patch("sqli_hunter.waf_detector.WAF_SIGNATURES", MOCK_SIGNATURES)
def test_single_match_not_enough():
    """Tests that a single weak signal does not trigger a detection."""
    features = {
        "headers": {"server": "BigIP"},
        "cookies": set(),
        "body": "",
        "delay_ratio": 1.0
    }
    assert detector()._predict_waf(features) is None
